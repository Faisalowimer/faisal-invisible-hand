// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Product model represents a product with its core details and relationships
model Product {
  id                String        @id
  name              String
  size              String
  productId         String
  brandName         String
  brandId           String
  imageUrl          String
  imageAltText      String?
  evergreenUrl      String?
  price             Price?
  priceId           String?
  itemMedicare      String?
  dietaryAttributes Dietary[]
  availability      Availability?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

// Dietary model tracks dietary attributes/restrictions for products
model Dietary {
  id        String   @id @default(uuid())
  name      String // is this the attribute name?
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Availability model tracks product stock and availability information
model Availability {
  id                 String   @id @default(uuid())
  available          Boolean
  stockLevel         String
  retailerLocationId String?
  availabilityScore  Float?
  productId          String   @unique
  product            Product  @relation(fields: [productId], references: [id])
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// Price model tracks current and original pricing for products
model Price {
  id        String    @id @default(uuid())
  price     Float // Current price or discounted price
  fullPrice Float // Original price
  discount  Discount?
  productId String    @unique
  product   Product   @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

// Discount model tracks various types of discounts and promotions
model Discount {
  id                String    @id @default(uuid())
  amount            Float? // Amount discounted
  percent           Float? // Discount percentage
  couponCode        String? // Associated coupon code
  onSale            Boolean // Is the product on sale?
  retailerPromotion Boolean // Is the promotion from a retailer?
  buyOneGetOne      Boolean // Is the promotion a buy one get one?
  cpgCoupon         Boolean // Is the promotion a cpg coupon (consumer packaged goods)?
  promotionEndDate  DateTime? // End date of promotion
  priceId           String    @unique
  price             Price     @relation(fields: [priceId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
